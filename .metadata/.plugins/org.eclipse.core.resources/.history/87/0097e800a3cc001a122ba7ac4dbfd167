package blockChain;

import java.util.Date;
import java.util.List;

/**
 * 區塊鏈基礎架構
 */
public class Block {

	public String hashCode;// hash=數字簽名

	public String previousHashCode;// 前一塊的hash

	private List<Transaction> transactions;// 記錄各種交易

	private long timeStamp; // 從 1/1/1970到現在的毫秒數，當成時間戳章.

	// 挖礦所需亂數
	private int nonce;

	public Block() {

	}

	public Block(List<Transaction> transactions, String previousHashCode) {
		this.transactions = transactions;
		this.previousHashCode = previousHashCode;
		this.timeStamp = new Date().getTime();
		this.hashCode = calculateHash();
	}

	/**
	 * 自身的hash值，是通過前塊的hash值，和資料data，再通過hash計算出來的
	 */
	public String calculateHash() {

		StringBuilder sb = new StringBuilder();
		for (int i=0; i<transactions.size(); i++) {
			String stringHashCode = Integer.toString(transactions.get(i).hashCode());
			sb.append(stringHashCode);
		}

		String total = previousHashCode + sb.toString() + Long.toString(timeStamp);
		String calculatedhash = EncryptMethod.applySha256(total);

		return calculatedhash;
	}

	/**
	 * 挖礦
	 * @param difficulty
	 */
	public void mineBlock(int difficulty) {
		
		String miningHash="";
		
		//建立難度:需要幾個零
		String target = new String(new char[difficulty]).replace('\0', '0');

		do {
			miningHash = calculateMiningHash();
			nonce++;
		}
		while (!miningHash.substring(0, difficulty).equals(target)); 
		
		System.out.println("Block Mined!!! : " + miningHash);
	}
	
	/**
	 * 工作量算法
	 */
	private String calculateMiningHash() {

		StringBuilder sb = new StringBuilder();
		for (int i=0; i<transactions.size(); i++) {
			String stringTransactionHashCode = Integer.toString(transactions.get(i).hashCode());
			sb.append(stringTransactionHashCode);
		}

		String total = previousHashCode + sb.toString() + Long.toString(timeStamp)+Integer.toString(nonce);
		String calculatedMiningHash = EncryptMethod.applySha256(total);

		return calculatedMiningHash;
	}

}